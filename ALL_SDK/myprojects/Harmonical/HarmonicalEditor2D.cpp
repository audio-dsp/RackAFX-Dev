//HarmonicalEditor2D.cpp - VSTGUI editor file, automatically generated by VSTGUI Builder
//	--------------------------------------------------------------------------
//	Copyright (c) 2005 Niall Moody
//	
//	Permission is hereby granted, free of charge, to any person obtaining a
//	copy of this software and associated documentation files (the "Software"),
//	to deal in the Software without restriction, including without limitation
//	the rights to use, copy, modify, merge, publish, distribute, sublicense,
//	and/or sell copies of the Software, and to permit persons to whom the
//	Software is furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in
//	all copies or substantial portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//	DEALINGS IN THE SOFTWARE.
//	--------------------------------------------------------------------------

#include <stdio.h>
#include "HarmonicalEditor2D.h"

#include "Harmonical.h"

enum
{
    kBack = 128,
    kTickBox,
    kBigKnob,
    kSmallKnob,
};

//--------------------------------
HarmonicalEditor2D::HarmonicalEditor2D(AudioEffect *effect) : AEffGUIEditor(effect)
{
    LFO1Reset = 0;
    LFO2Reset = 0;
    M0MSrc = 0;
    M2MSrc = 0;
    M4MSrc = 0;
    M6MSrc = 0;
    M1Val = 0;
    M3Val = 0;
    M5Val = 0;
    M7Val = 0;
    LFO1Wave = 0;
    LFO2Wave = 0;
    FiltType = 0;
    Env1 = 0;
    Env2 = 0;
    M0Val = 0;
    M2Val = 0;
    M4Val = 0;
    M6Val = 0;
    M0Mod = 0;
    M2Mod = 0;
    M4Mod = 0;
    M6Mod = 0;
    Level = 0;
    LFO1Rate = 0;
    LFO2Rate = 0;
    FiltCutoff = 0;
    FiltRes = 0;
	FiltMod = 0;
	FiltMSrc = 0;

    hTickBox = 0;
    hBigKnob = 0;
    hSmallKnob = 0;

    hBack  = new CBitmap(kBack);

    rect.left   = 0;
    rect.top    = 0;
    rect.right  = (short)hBack->getWidth();
    rect.bottom = (short)hBack->getHeight();
}

//--------------------------------
HarmonicalEditor2D::~HarmonicalEditor2D()
{
    if(hBack)
    {
        if(hBack->getNbReference()<=1)
        {
            hBack->forget();
            hBack = 0;
        }
        else
            hBack->forget();
    }
}

//--------------------------------
long HarmonicalEditor2D::open(void *ptr)
{
    CRect size, temp;
    CPoint point;

    CColor tempcol1 = {255, 255, 255, 255};
    CColor tempcol2 = {64, 64, 64, 255};
    CColor tempcol3 = {168, 190, 154, 255};

    AEffGUIEditor::open(ptr);

    hTickBox = new CBitmap(kTickBox);
    hBigKnob = new CBitmap(kBigKnob);
    hSmallKnob = new CBitmap(kSmallKnob);

    size(0, 0, hBack->getWidth(), hBack->getHeight());
    frame = new CFrame(size, ptr, this);
    frame->setBackground(hBack);

    //--LFO1Reset--------
    size(389, 68, (389+13), (68+13));
    LFO1Reset = new COnOffButton(size, this, Harmonical::LFO1Reset, hTickBox);
    LFO1Reset->setValue(effect->getParameter(Harmonical::LFO1Reset));
    LFO1Reset->setTransparency(false);
    frame->addView(LFO1Reset);

    //--LFO2Reset--------
    size(496, 68, (496+13), (68+13));
    LFO2Reset = new COnOffButton(size, this, Harmonical::LFO2Reset, hTickBox);
    LFO2Reset->setValue(effect->getParameter(Harmonical::LFO2Reset));
    LFO2Reset->setTransparency(false);
    frame->addView(LFO2Reset);

    //--M0MSrc--------
    size(22, 127, (22+51), (127+13));
	point(22, 127);
    M0MSrc = new COptionMenu(size, this, Harmonical::M0MSrc, hBack, 0, 0);
    M0MSrc->setFont(kNormalFontVerySmall);
	M0MSrc->setBackOffset(point);
	M0MSrc->setFontColor(tempcol3);
	M0MSrc->addEntry("---");
	M0MSrc->addEntry("Envelope1");
	M0MSrc->addEntry("Envelope2");
	M0MSrc->addEntry("LFO1");
	M0MSrc->addEntry("LFO2");
	M0MSrc->addEntry("-Envelope1");
	M0MSrc->addEntry("-Envelope2");
	M0MSrc->addEntry("-LFO1");
	M0MSrc->addEntry("-LFO2");
    M0MSrc->setCurrent((int)(effect->getParameter(Harmonical::M0MSrc)*M0MSrc->getNbEntries()));
    frame->addView(M0MSrc);

    //--M2MSrc--------
    size(98, 127, (98+51), (127+13));
	point(98, 127);
    M2MSrc = new COptionMenu(size, this, Harmonical::M2MSrc, hBack, 0, 0);
    M2MSrc->setFont(kNormalFontVerySmall);
	M2MSrc->setBackOffset(point);
	M2MSrc->setFontColor(tempcol3);
	M2MSrc->addEntry("---");
	M2MSrc->addEntry("Envelope1");
	M2MSrc->addEntry("Envelope2");
	M2MSrc->addEntry("LFO1");
	M2MSrc->addEntry("LFO2");
	M2MSrc->addEntry("-Envelope1");
	M2MSrc->addEntry("-Envelope2");
	M2MSrc->addEntry("-LFO1");
	M2MSrc->addEntry("-LFO2 ");
    M2MSrc->setCurrent((int)(effect->getParameter(Harmonical::M2MSrc)*M2MSrc->getNbEntries()));
    frame->addView(M2MSrc);

    //--M4MSrc--------
    size(174, 127, (174+51), (127+13));
	point(174, 127);
    M4MSrc = new COptionMenu(size, this, Harmonical::M4MSrc, hBack, 0, 0);
    M4MSrc->setFont(kNormalFontVerySmall);
	M4MSrc->setBackOffset(point);
	M4MSrc->setFontColor(tempcol3);
	M4MSrc->addEntry("---");
	M4MSrc->addEntry("Envelope1");
	M4MSrc->addEntry("Envelope2");
	M4MSrc->addEntry("LFO1");
	M4MSrc->addEntry("LFO2");
	M4MSrc->addEntry("-Envelope1");
	M4MSrc->addEntry("-Envelope2");
	M4MSrc->addEntry("-LFO1");
	M4MSrc->addEntry("-LFO2 ");
    M4MSrc->setCurrent((int)(effect->getParameter(Harmonical::M4MSrc)*M4MSrc->getNbEntries()));
    frame->addView(M4MSrc);

    //--M6MSrc--------
    size(250, 127, (250+51), (127+13));
	point(250, 127);
    M6MSrc = new COptionMenu(size, this, Harmonical::M6MSrc, hBack, 0, 0);
    M6MSrc->setFont(kNormalFontVerySmall);
	M6MSrc->setBackOffset(point);
	M6MSrc->setFontColor(tempcol3);
	M6MSrc->addEntry("---");
	M6MSrc->addEntry("Envelope1");
	M6MSrc->addEntry("Envelope2");
	M6MSrc->addEntry("LFO1");
	M6MSrc->addEntry("LFO2");
	M6MSrc->addEntry("-Envelope1");
	M6MSrc->addEntry("-Envelope2");
	M6MSrc->addEntry("-LFO1");
	M6MSrc->addEntry("-LFO2");
    M6MSrc->setCurrent((int)(effect->getParameter(Harmonical::M6MSrc)*M6MSrc->getNbEntries()));
    frame->addView(M6MSrc);

    //--M1Val--------
    size(346, 94, (346+12), (94+13));
	point(346, 94);
    M1Val = new COptionMenu(size, this, Harmonical::M1Val, hBack, 0, 0);
    M1Val->setFont(kNormalFontVerySmall);
	M1Val->setBackOffset(point);
	M1Val->setFontColor(tempcol3);
	M1Val->addEntry("0");
	M1Val->addEntry("1");
	M1Val->addEntry("2");
	M1Val->addEntry("3");
	M1Val->addEntry("4");
	M1Val->addEntry("5");
	M1Val->addEntry("6");
	M1Val->addEntry("7");
	M1Val->addEntry("8");
	M1Val->addEntry("9");
    M1Val->setCurrent((int)(effect->getParameter(Harmonical::M1Val)*M1Val->getNbEntries()));
    frame->addView(M1Val);

    //--M3Val--------
    size(346, 123, (346+12), (123+13));
	point(346, 123);
    M3Val = new COptionMenu(size, this, Harmonical::M3Val, hBack, 0, 0);
    M3Val->setFont(kNormalFontVerySmall);
	M3Val->setBackOffset(point);
	M3Val->setFontColor(tempcol3);
	M3Val->addEntry("0");
	M3Val->addEntry("1");
	M3Val->addEntry("2");
	M3Val->addEntry("3");
	M3Val->addEntry("4");
	M3Val->addEntry("5");
	M3Val->addEntry("6");
	M3Val->addEntry("7");
	M3Val->addEntry("8");
	M3Val->addEntry("9");
    M3Val->setCurrent((int)(effect->getParameter(Harmonical::M3Val)*M3Val->getNbEntries()));
    frame->addView(M3Val);

    //--M5Val--------
    size(346, 152, (346+12), (152+13));
	point(346, 152);
    M5Val = new COptionMenu(size, this, Harmonical::M5Val, hBack, 0, 0);
    M5Val->setFont(kNormalFontVerySmall);
	M5Val->setBackOffset(point);
	M5Val->setFontColor(tempcol3);
	M5Val->addEntry("0");
	M5Val->addEntry("1");
	M5Val->addEntry("2");
	M5Val->addEntry("3");
	M5Val->addEntry("4");
	M5Val->addEntry("5");
	M5Val->addEntry("6");
	M5Val->addEntry("7");
	M5Val->addEntry("8");
	M5Val->addEntry("9");
    M5Val->setCurrent((int)(effect->getParameter(Harmonical::M5Val)*M5Val->getNbEntries()));
    frame->addView(M5Val);

    //--M7Val--------
    size(346, 181, (346+12), (181+13));
	point(346, 181);
    M7Val = new COptionMenu(size, this, Harmonical::M7Val, hBack, 0, 0);
    M7Val->setFont(kNormalFontVerySmall);
	M7Val->setBackOffset(point);
	M7Val->setFontColor(tempcol3);
	M7Val->addEntry("0");
	M7Val->addEntry("1");
	M7Val->addEntry("2");
	M7Val->addEntry("3");
	M7Val->addEntry("4");
	M7Val->addEntry("5");
	M7Val->addEntry("6");
	M7Val->addEntry("7");
	M7Val->addEntry("8");
	M7Val->addEntry("9");
    M7Val->setCurrent((int)(effect->getParameter(Harmonical::M7Val)*M7Val->getNbEntries()));
    frame->addView(M7Val);

    //--LFO1Wave--------
    size(394, 43, (394+39), (43+13));
	point(394, 43);
    LFO1Wave = new COptionMenu(size, this, Harmonical::LFO1Wave, hBack, 0, 0);
    LFO1Wave->setFont(kNormalFontVerySmall);
	LFO1Wave->setBackOffset(point);
	LFO1Wave->setFontColor(tempcol3);
	LFO1Wave->addEntry("Sine");
	LFO1Wave->addEntry("Saw");
	LFO1Wave->addEntry("Ramp");
	LFO1Wave->addEntry("Square");
	LFO1Wave->addEntry("S/H");
    LFO1Wave->setCurrent((int)(effect->getParameter(Harmonical::LFO1Wave)*LFO1Wave->getNbEntries()));
    frame->addView(LFO1Wave);

    //--LFO2Wave--------
    size(501, 43, (501+39), (43+13));
	point(501, 43);
    LFO2Wave = new COptionMenu(size, this, Harmonical::LFO2Wave, hBack, 0, 0);
    LFO2Wave->setFont(kNormalFontVerySmall);
	LFO2Wave->setBackOffset(point);
	LFO2Wave->setFontColor(tempcol3);
	LFO2Wave->addEntry("Sine");
	LFO2Wave->addEntry("Saw");
	LFO2Wave->addEntry("Ramp");
	LFO2Wave->addEntry("Square");
	LFO2Wave->addEntry("S/H");
    LFO2Wave->setCurrent((int)(effect->getParameter(Harmonical::LFO2Wave)*LFO2Wave->getNbEntries()));
    frame->addView(LFO2Wave);

    //--FiltType--------
    size(493, 210, (493+16), (210+13));
	point(493, 210);
    FiltType = new COptionMenu(size, this, Harmonical::FiltType, hBack, 0, 0);
    FiltType->setFont(kNormalFontVerySmall);
	FiltType->setBackOffset(point);
	FiltType->setFontColor(tempcol3);
	FiltType->addEntry("---");
	FiltType->addEntry("LP");
	FiltType->addEntry("BP");
	FiltType->addEntry("HP");
    FiltType->setCurrent((int)(effect->getParameter(Harmonical::FiltType)*FiltType->getNbEntries()));
    frame->addView(FiltType);

    //--Env1--------
    size(389, 116, (389+91), (116+44));
    point(389, 116);
    Env1 = new CGraphicADSR_x(size, this, Harmonical::Env1A, Harmonical::Env1D, Harmonical::Env1S, Harmonical::Env1R, tempcol1, tempcol2, 0, hBack);
    Env1->SetBackgroundOffset(point);
    Env1->setValue_A(effect->getParameter(Harmonical::Env1A));
    Env1->setValue_D(effect->getParameter(Harmonical::Env1D));
    Env1->setValue_S(effect->getParameter(Harmonical::Env1S));
    Env1->setValue_R(effect->getParameter(Harmonical::Env1R));
    Env1->SetHandleSize(7);
    Env1->setTransparency(true);
    frame->addView(Env1);

    //--Env2--------
    size(496, 116, (496+91), (116+44));
    point(496, 116);
    Env2 = new CGraphicADSR_x(size, this, Harmonical::Env2A, Harmonical::Env2D, Harmonical::Env2S, Harmonical::Env2R, tempcol1, tempcol2, 0, hBack);
    Env2->SetBackgroundOffset(point);
    Env2->setValue_A(effect->getParameter(Harmonical::Env2A));
    Env2->setValue_D(effect->getParameter(Harmonical::Env2D));
    Env2->setValue_S(effect->getParameter(Harmonical::Env2S));
    Env2->setValue_R(effect->getParameter(Harmonical::Env2R));
    Env2->SetHandleSize(7);
    Env2->setTransparency(true);
    frame->addView(Env2);

    //--M0Val--------
    size(24, 59, (24+47), (59+47));
    point(24, 59);
    M0Val = new CAnimKnob(size, this, Harmonical::M0Val, 57, 47, hBigKnob, point);
    M0Val->setValue(effect->getParameter(Harmonical::M0Val));
    M0Val->setTransparency(false);
    frame->addView(M0Val);

    //--M2Val--------
    size(100, 59, (100+47), (59+47));
    point(100, 59);
    M2Val = new CAnimKnob(size, this, Harmonical::M2Val, 57, 47, hBigKnob, point);
    M2Val->setValue(effect->getParameter(Harmonical::M2Val));
    M2Val->setTransparency(true);
    frame->addView(M2Val);

    //--M4Val--------
    size(176, 59, (176+47), (59+47));
    point(176, 59);
    M4Val = new CAnimKnob(size, this, Harmonical::M4Val, 57, 47, hBigKnob, point);
    M4Val->setValue(effect->getParameter(Harmonical::M4Val));
    M4Val->setTransparency(true);
    frame->addView(M4Val);

    //--M6Val--------
    size(252, 59, (252+47), (59+47));
    point(252, 59);
    M6Val = new CAnimKnob(size, this, Harmonical::M6Val, 57, 47, hBigKnob, point);
    M6Val->setValue(effect->getParameter(Harmonical::M6Val));
    M6Val->setTransparency(true);
    frame->addView(M6Val);

    //--M0Mod--------
    size(24, 160, (24+47), (160+47));
    point(24, 160);
    M0Mod = new CAnimKnob(size, this, Harmonical::M0Mod, 57, 47, hBigKnob, point);
    M0Mod->setValue(effect->getParameter(Harmonical::M0Mod));
    M0Mod->setTransparency(true);
    frame->addView(M0Mod);

    //--M2Mod--------
    size(100, 160, (100+47), (160+47));
    point(100, 160);
    M2Mod = new CAnimKnob(size, this, Harmonical::M2Mod, 57, 47, hBigKnob, point);
    M2Mod->setValue(effect->getParameter(Harmonical::M2Mod));
    M2Mod->setTransparency(true);
    frame->addView(M2Mod);

    //--M4Mod--------
    size(176, 160, (176+47), (160+47));
    point(176, 160);
    M4Mod = new CAnimKnob(size, this, Harmonical::M4Mod, 57, 47, hBigKnob, point);
    M4Mod->setValue(effect->getParameter(Harmonical::M4Mod));
    M4Mod->setTransparency(true);
    frame->addView(M4Mod);

    //--M6Mod--------
    size(252, 160, (252+47), (160+47));
    point(252, 160);
    M6Mod = new CAnimKnob(size, this, Harmonical::M6Mod, 57, 47, hBigKnob, point);
    M6Mod->setValue(effect->getParameter(Harmonical::M6Mod));
    M6Mod->setTransparency(true);
    frame->addView(M6Mod);

    //--Level--------
    size(539, 176, (539+47), (176+47));
    point(539, 176);
    Level = new CAnimKnob(size, this, Harmonical::Level, 57, 47, hBigKnob, point);
    Level->setValue(effect->getParameter(Harmonical::Level));
    Level->setTransparency(true);
    frame->addView(Level);

    //--LFO1Rate--------
    size(446, 25, (446+35), (25+35));
    point(446, 25);
    LFO1Rate = new CAnimKnob(size, this, Harmonical::LFO1Rate, 57, 35, hSmallKnob, point);
    LFO1Rate->setValue(effect->getParameter(Harmonical::LFO1Rate));
    LFO1Rate->setTransparency(true);
    frame->addView(LFO1Rate);

    //--LFO2Rate--------
    size(553, 25, (553+35), (25+35));
    point(553, 25);
    LFO2Rate = new CAnimKnob(size, this, Harmonical::LFO2Rate, 57, 35, hSmallKnob, point);
    LFO2Rate->setValue(effect->getParameter(Harmonical::LFO2Rate));
    LFO2Rate->setTransparency(true);
    frame->addView(LFO2Rate);

    //--FiltCutoff--------
    size(395, 189, (395+35), (189+35));
    point(395, 189);
    FiltCutoff = new CAnimKnob(size, this, Harmonical::FiltCutoff, 57, 35, hSmallKnob, point);
    FiltCutoff->setValue(effect->getParameter(Harmonical::FiltCutoff));
    FiltCutoff->setTransparency(true);
    frame->addView(FiltCutoff);

    //--FiltRes--------
    size(446, 189, (446+35), (189+35));
    point(446, 189);
    FiltRes = new CAnimKnob(size, this, Harmonical::FiltRes, 57, 35, hSmallKnob, point);
    FiltRes->setValue(effect->getParameter(Harmonical::FiltRes));
    FiltRes->setTransparency(true);
    frame->addView(FiltRes);

    //--FiltMod--------
    size(329, 6, (329+35), (6+35));
    point(329, 6);
    FiltMod = new CAnimKnob(size, this, Harmonical::FiltMod, 57, 35, hSmallKnob, point);
    FiltMod->setValue(effect->getParameter(Harmonical::FiltMod));
    FiltMod->setTransparency(true);
    frame->addView(FiltMod);

    //--FiltMSrc--------
    size(263, 9, (261+51), (9+13));
	point(263, 9);
    FiltMSrc = new COptionMenu(size, this, Harmonical::FiltMSrc, hBack, 0, 0);
    FiltMSrc->setFont(kNormalFontVerySmall);
	FiltMSrc->setBackOffset(point);
	FiltMSrc->setFontColor(tempcol3);
	FiltMSrc->addEntry("---");
	FiltMSrc->addEntry("Envelope1");
	FiltMSrc->addEntry("Envelope2");
	FiltMSrc->addEntry("LFO1");
	FiltMSrc->addEntry("LFO2");
	FiltMSrc->addEntry("-Envelope1");
	FiltMSrc->addEntry("-Envelope2");
	FiltMSrc->addEntry("-LFO1");
	FiltMSrc->addEntry("-LFO2");
    FiltMSrc->setCurrent((int)(effect->getParameter(Harmonical::FiltMSrc)*FiltMSrc->getNbEntries()));
    frame->addView(FiltMSrc);

#ifdef PATCH_GEN
	size(0, 0, 13, 13);
	point(0, 0);
	GeneratePatch = new CKickButton(size, this, Harmonical::GeneratePatch, 13, hTickBox, point);
	frame->addView(GeneratePatch);
#endif

    setKnobMode(kLinearMode);

    if(hTickBox)
        hTickBox->forget();
    if(hBigKnob)
        hBigKnob->forget();
    if(hSmallKnob)
        hSmallKnob->forget();

    return true;
}

//--------------------------------
void HarmonicalEditor2D::close()
{
    delete frame;
    frame = 0;

}

//--------------------------------
void HarmonicalEditor2D::setParameter(long index, float value)
{
    if(!frame)
        return;

    switch(index)
    {
    case Harmonical::LFO1Reset:
        if(LFO1Reset)
            LFO1Reset->setValue(effect->getParameter(index));
        break;
    case Harmonical::LFO2Reset:
        if(LFO2Reset)
            LFO2Reset->setValue(effect->getParameter(index));
        break;
    case Harmonical::M0MSrc:
        if(M0MSrc)
            M0MSrc->setCurrent((int)(effect->getParameter(index)*(float)M0MSrc->getNbEntries()));
        break;
    case Harmonical::M2MSrc:
        if(M2MSrc)
            M2MSrc->setCurrent((int)(value*M2MSrc->getNbEntries()));
        break;
    case Harmonical::M4MSrc:
        if(M4MSrc)
            M4MSrc->setCurrent((int)(value*M4MSrc->getNbEntries()));
        break;
    case Harmonical::M6MSrc:
        if(M6MSrc)
            M6MSrc->setCurrent((int)(value*M6MSrc->getNbEntries()));
        break;
    case Harmonical::M1Val:
        if(M1Val)
            M1Val->setCurrent((int)(value*M1Val->getNbEntries()));
        break;
    case Harmonical::M3Val:
        if(M3Val)
            M3Val->setCurrent((int)(value*M3Val->getNbEntries()));
        break;
    case Harmonical::M5Val:
        if(M5Val)
            M5Val->setCurrent((int)(value*M5Val->getNbEntries()));
        break;
    case Harmonical::M7Val:
        if(M7Val)
            M7Val->setCurrent((int)(value*M7Val->getNbEntries()));
        break;
    case Harmonical::LFO1Wave:
        if(LFO1Wave)
            LFO1Wave->setCurrent((int)(value*LFO1Wave->getNbEntries()));
        break;
    case Harmonical::LFO2Wave:
        if(LFO2Wave)
            LFO2Wave->setCurrent((int)(value*LFO2Wave->getNbEntries()));
        break;
    case Harmonical::FiltType:
        if(FiltType)
            FiltType->setCurrent((int)(value*FiltType->getNbEntries()));
        break;
        case Harmonical::Env1A:
            if(Env1)
                Env1->setValue_A(effect->getParameter(index));
            break;
        case Harmonical::Env1D:
            if(Env1)
                Env1->setValue_D(effect->getParameter(index));
            break;
        case Harmonical::Env1S:
            if(Env1)
                Env1->setValue_S(effect->getParameter(index));
            break;
        case Harmonical::Env1R:
            if(Env1)
                Env1->setValue_R(effect->getParameter(index));
            break;
        case Harmonical::Env2A:
            if(Env2)
                Env2->setValue_A(effect->getParameter(index));
            break;
        case Harmonical::Env2D:
            if(Env2)
                Env2->setValue_D(effect->getParameter(index));
            break;
        case Harmonical::Env2S:
            if(Env2)
                Env2->setValue_S(effect->getParameter(index));
            break;
        case Harmonical::Env2R:
            if(Env2)
                Env2->setValue_R(effect->getParameter(index));
            break;
    case Harmonical::M0Val:
        if(M0Val)
            M0Val->setValue(effect->getParameter(index));
        break;
    case Harmonical::M2Val:
        if(M2Val)
            M2Val->setValue(effect->getParameter(index));
        break;
    case Harmonical::M4Val:
        if(M4Val)
            M4Val->setValue(effect->getParameter(index));
        break;
    case Harmonical::M6Val:
        if(M6Val)
            M6Val->setValue(effect->getParameter(index));
        break;
    case Harmonical::M0Mod:
        if(M0Mod)
            M0Mod->setValue(effect->getParameter(index));
        break;
    case Harmonical::M2Mod:
        if(M2Mod)
            M2Mod->setValue(effect->getParameter(index));
        break;
    case Harmonical::M4Mod:
        if(M4Mod)
            M4Mod->setValue(effect->getParameter(index));
        break;
    case Harmonical::M6Mod:
        if(M6Mod)
            M6Mod->setValue(effect->getParameter(index));
        break;
    case Harmonical::Level:
        if(Level)
            Level->setValue(effect->getParameter(index));
        break;
    case Harmonical::LFO1Rate:
        if(LFO1Rate)
            LFO1Rate->setValue(effect->getParameter(index));
        break;
    case Harmonical::LFO2Rate:
        if(LFO2Rate)
            LFO2Rate->setValue(effect->getParameter(index));
        break;
    case Harmonical::FiltCutoff:
        if(FiltCutoff)
            FiltCutoff->setValue(effect->getParameter(index));
        break;
    case Harmonical::FiltRes:
        if(FiltRes)
            FiltRes->setValue(effect->getParameter(index));
        break;
    case Harmonical::FiltMod:
        if(FiltMod)
            FiltMod->setValue(effect->getParameter(index));
        break;
    case Harmonical::FiltMSrc:
        if(FiltMSrc)
            FiltMSrc->setCurrent((int)(value*FiltMSrc->getNbEntries()));
        break;
    }
    postUpdate();
}

//--------------------------------
void HarmonicalEditor2D::valueChanged(CDrawContext* context, CControl* control)
{
    long tag = control->getTag();

    switch(tag)
    {
    case Harmonical::LFO1Reset:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::LFO2Reset:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M0MSrc:
        effect->setParameterAutomated(tag, ((float)M0MSrc->getCurrent()/(float)M0MSrc->getNbEntries()));
        break;
    case Harmonical::M2MSrc:
        effect->setParameterAutomated(tag, ((float)M2MSrc->getCurrent()/(float)M2MSrc->getNbEntries()));
        break;
    case Harmonical::M4MSrc:
        effect->setParameterAutomated(tag, ((float)M4MSrc->getCurrent()/(float)M4MSrc->getNbEntries()));
        break;
    case Harmonical::M6MSrc:
        effect->setParameterAutomated(tag, ((float)M6MSrc->getCurrent()/(float)M6MSrc->getNbEntries()));
        break;
    case Harmonical::M1Val:
        effect->setParameterAutomated(tag, ((float)M1Val->getCurrent()/(float)M1Val->getNbEntries()));
        break;
    case Harmonical::M3Val:
        effect->setParameterAutomated(tag, ((float)M3Val->getCurrent()/(float)M3Val->getNbEntries()));
        break;
    case Harmonical::M5Val:
        effect->setParameterAutomated(tag, ((float)M5Val->getCurrent()/(float)M5Val->getNbEntries()));
        break;
    case Harmonical::M7Val:
        effect->setParameterAutomated(tag, ((float)M7Val->getCurrent()/(float)M7Val->getNbEntries()));
        break;
    case Harmonical::LFO1Wave:
        effect->setParameterAutomated(tag, ((float)LFO1Wave->getCurrent()/(float)LFO1Wave->getNbEntries()));
        break;
    case Harmonical::LFO2Wave:
        effect->setParameterAutomated(tag, ((float)LFO2Wave->getCurrent()/(float)LFO2Wave->getNbEntries()));
        break;
    case Harmonical::FiltType:
        effect->setParameterAutomated(tag, ((float)FiltType->getCurrent()/(float)FiltType->getNbEntries()));
        break;
        case Harmonical::Env1A:
            effect->setParameterAutomated(tag, Env1->getValue_A());
            break;
        case Harmonical::Env1D:
            effect->setParameterAutomated(tag, Env1->getValue_D());
            effect->setParameterAutomated(Harmonical::Env1S, Env1->getValue_S());
            break;
        case Harmonical::Env1R:
            effect->setParameterAutomated(tag, Env1->getValue_R());
            effect->setParameterAutomated(Harmonical::Env1S, Env1->getValue_S());
            break;
        case Harmonical::Env2A:
            effect->setParameterAutomated(tag, Env2->getValue_A());
            break;
        case Harmonical::Env2D:
            effect->setParameterAutomated(tag, Env2->getValue_D());
            effect->setParameterAutomated(Harmonical::Env2S, Env2->getValue_S());
            break;
        case Harmonical::Env2R:
            effect->setParameterAutomated(tag, Env2->getValue_R());
            effect->setParameterAutomated(Harmonical::Env2S, Env2->getValue_S());
            break;
    case Harmonical::M0Val:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M2Val:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M4Val:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M6Val:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M0Mod:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M2Mod:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M4Mod:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::M6Mod:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::Level:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::LFO1Rate:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::LFO2Rate:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::FiltCutoff:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::FiltRes:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::FiltMod:
        effect->setParameterAutomated(tag, control->getValue());
        break;
    case Harmonical::FiltMSrc:
        effect->setParameterAutomated(tag, ((float)FiltMSrc->getCurrent()/(float)M0MSrc->getNbEntries()));
        break;
#ifdef PATCH_GEN
		case Harmonical::GeneratePatch:
			effect->setParameterAutomated(tag, GeneratePatch->getValue());
			break;
#endif
    }
}

//--------------------------------
void HarmonicalEditor2D::idle()
{
    AEffGUIEditor::idle();

}
			